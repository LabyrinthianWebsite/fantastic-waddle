<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            line-height: 1.6;
            color: #333;
            background: #f8f9fa;
        }

        .container {
            max-width: 1000px;
            margin: 0 auto;
            padding: 0 20px;
        }

        /* Header */
        header {
            background: white;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 0;
        }

        .logo {
            font-size: 1.8rem;
            font-weight: bold;
            color: #667eea;
            text-decoration: none;
        }

        .nav-links {
            display: flex;
            list-style: none;
            gap: 2rem;
        }

        .nav-links a {
            color: #333;
            text-decoration: none;
            font-weight: 500;
            transition: color 0.3s ease;
        }

        .nav-links a:hover, .nav-links a.active {
            color: #667eea;
        }

        .user-menu {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .logout-btn {
            background: #dc3545;
            color: white;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 6px;
            text-decoration: none;
            font-size: 0.9rem;
            transition: background 0.3s ease;
        }

        .logout-btn:hover {
            background: #c82333;
        }

        /* Main content */
        main {
            padding: 2rem 0;
        }

        .page-header {
            margin-bottom: 2rem;
        }

        .page-title {
            font-size: 2.5rem;
            color: #333;
            margin-bottom: 0.5rem;
        }

        .page-subtitle {
            color: #666;
            font-size: 1.1rem;
        }

        .breadcrumb {
            margin-bottom: 2rem;
        }

        .breadcrumb a {
            color: #667eea;
            text-decoration: none;
        }

        .breadcrumb a:hover {
            text-decoration: underline;
        }

        /* Upload area */
        .upload-card {
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            padding: 2rem;
            margin-bottom: 2rem;
        }

        .upload-zone {
            border: 3px dashed #ddd;
            border-radius: 12px;
            padding: 3rem;
            text-align: center;
            background: #fafbfc;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .upload-zone:hover,
        .upload-zone.dragover {
            border-color: #667eea;
            background: #f0f2ff;
        }

        .upload-icon {
            font-size: 3rem;
            color: #ccc;
            margin-bottom: 1rem;
        }

        .upload-text {
            font-size: 1.2rem;
            color: #666;
            margin-bottom: 0.5rem;
        }

        .upload-hint {
            color: #999;
            font-size: 0.9rem;
        }

        .file-input {
            display: none;
        }

        .btn {
            display: inline-block;
            padding: 0.75rem 1.5rem;
            background: #667eea;
            color: white;
            text-decoration: none;
            border-radius: 8px;
            font-weight: 500;
            transition: background 0.3s ease;
            border: none;
            cursor: pointer;
            font-size: 1rem;
        }

        .btn:hover {
            background: #5a6fd8;
        }

        .btn-secondary {
            background: #6c757d;
        }

        .btn-secondary:hover {
            background: #5a6268;
        }

        /* Progress and file list */
        .progress-section {
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            padding: 2rem;
            display: none;
        }

        .progress-bar {
            width: 100%;
            height: 20px;
            background: #eee;
            border-radius: 10px;
            overflow: hidden;
            margin-bottom: 1rem;
        }

        .progress-fill {
            height: 100%;
            background: #667eea;
            width: 0%;
            transition: width 0.3s ease;
        }

        .file-list {
            max-height: 400px;
            overflow-y: auto;
        }

        .file-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem;
            border-bottom: 1px solid #eee;
        }

        .file-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .file-icon {
            width: 40px;
            height: 40px;
            background: #f0f2ff;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #667eea;
        }

        .file-status {
            padding: 0.25rem 0.75rem;
            border-radius: 15px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .status-pending {
            background: #fff3cd;
            color: #856404;
        }

        .status-uploading {
            background: #d4edda;
            color: #155724;
        }

        .status-success {
            background: #d1ecf1;
            color: #0c5460;
        }

        .status-error {
            background: #f8d7da;
            color: #721c24;
        }

        .status-skipped {
            background: #e2e3e5;
            color: #6c757d;
        }

        .actions {
            display: flex;
            gap: 1rem;
            margin-top: 2rem;
            padding-top: 2rem;
            border-top: 1px solid #eee;
        }

        @media (max-width: 768px) {
            .nav-links {
                display: none;
            }
            
            .container {
                padding: 0 15px;
            }
        }
    </style>
</head>
<body>
    <header>
        <nav class="container">
            <a href="/" class="logo">Gallery Suite Admin</a>
            <ul class="nav-links">
                <li><a href="/admin">Dashboard</a></li>
                <li><a href="/admin/studios">Studios</a></li>
                <li><a href="/admin/models">Models</a></li>
                <li><a href="/admin/sets" class="active">Sets</a></li>
            </ul>
            <div class="user-menu">
                <span>Welcome, Admin</span>
                <a href="/admin/logout" class="logout-btn">Logout</a>
            </div>
        </nav>
    </header>

    <main>
        <div class="container">
            <div class="breadcrumb">
                <a href="/admin">Dashboard</a> / <a href="/admin/sets">Sets</a> / Upload Media
            </div>

            <div class="page-header">
                <h1 class="page-title">Upload Media</h1>
                <p class="page-subtitle">
                    Upload images and videos for set: <strong><%= set.name %></strong>
                </p>
            </div>

            <div class="upload-card">
                <div class="upload-zone" id="uploadZone">
                    <div class="upload-icon">üìÅ</div>
                    <div class="upload-text">Click to select files or drag and drop</div>
                    <div class="upload-hint">Supports images (JPG, PNG, GIF, WebP) and videos (MP4, AVI, MOV, WebM)</div>
                    <input type="file" id="fileInput" class="file-input" multiple accept="image/*,video/*">
                </div>
                
                <div class="actions">
                    <button type="button" class="btn" onclick="document.getElementById('fileInput').click()">
                        Choose Files
                    </button>
                    <button type="button" class="btn" id="uploadBtn" onclick="startUpload()" disabled>
                        Upload Selected Files
                    </button>
                    <button type="button" class="btn btn-secondary" onclick="clearAllFiles()">
                        Clear All Files
                    </button>
                    <a href="/admin/sets" class="btn btn-secondary">Back to Sets</a>
                </div>
            </div>

            <div class="progress-section" id="progressSection">
                <h3>Upload Progress</h3>
                <div class="progress-bar">
                    <div class="progress-fill" id="progressFill"></div>
                </div>
                <div id="progressText">0% complete</div>
                
                <div class="file-list" id="fileList">
                    <!-- Files will be listed here during upload -->
                </div>
            </div>
        </div>
    </main>

    <script>
        let selectedFiles = [];
        let uploadInProgress = false;

        const uploadZone = document.getElementById('uploadZone');
        const fileInput = document.getElementById('fileInput');
        const uploadBtn = document.getElementById('uploadBtn');
        const progressSection = document.getElementById('progressSection');
        const progressFill = document.getElementById('progressFill');
        const progressText = document.getElementById('progressText');
        const fileList = document.getElementById('fileList');

        // Drag and drop handling
        uploadZone.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadZone.classList.add('dragover');
        });

        uploadZone.addEventListener('dragleave', (e) => {
            e.preventDefault();
            uploadZone.classList.remove('dragover');
        });

        uploadZone.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadZone.classList.remove('dragover');
            
            const files = Array.from(e.dataTransfer.files);
            handleFiles(files);
        });

        uploadZone.addEventListener('click', () => {
            if (!uploadInProgress) {
                fileInput.click();
            }
        });

        fileInput.addEventListener('change', (e) => {
            const files = Array.from(e.target.files);
            handleFiles(files);
        });

        function handleFiles(files) {
            if (uploadInProgress) return;
            
            const newFiles = files.filter(file => {
                return file.type.startsWith('image/') || file.type.startsWith('video/');
            });

            // Add new files to existing selection instead of replacing
            selectedFiles = [...selectedFiles, ...newFiles];

            // Remove duplicates based on name and size
            const uniqueFiles = [];
            const seen = new Set();
            
            selectedFiles.forEach(file => {
                const key = `${file.name}_${file.size}`;
                if (!seen.has(key)) {
                    seen.add(key);
                    uniqueFiles.push(file);
                }
            });
            
            selectedFiles = uniqueFiles;

            updateFileDisplay();
        }

        function updateFileDisplay() {
            if (selectedFiles.length > 0) {
                uploadBtn.disabled = false;
                uploadZone.querySelector('.upload-text').textContent = 
                    `${selectedFiles.length} file(s) selected (drag more to add)`;
                
                // Show file list in upload zone
                displaySelectedFiles();
            } else {
                uploadBtn.disabled = true;
                uploadZone.querySelector('.upload-text').textContent = 
                    'Click to select files or drag and drop';
                clearSelectedFilesDisplay();
            }
        }

        function displaySelectedFiles() {
            let existingList = uploadZone.querySelector('.selected-files-preview');
            if (!existingList) {
                existingList = document.createElement('div');
                existingList.className = 'selected-files-preview';
                existingList.style.cssText = `
                    margin-top: 1rem;
                    max-height: 200px;
                    overflow-y: auto;
                    border: 1px solid #ddd;
                    border-radius: 8px;
                    padding: 0.5rem;
                    background: white;
                    text-align: left;
                `;
                uploadZone.appendChild(existingList);
            }

            existingList.innerHTML = selectedFiles.map((file, index) => `
                <div style="display: flex; justify-content: space-between; align-items: center; padding: 0.25rem 0; border-bottom: 1px solid #eee;">
                    <span style="font-size: 0.9rem;">
                        ${file.type.startsWith('video/') ? 'üé•' : 'üñºÔ∏è'} ${file.name} (${formatFileSize(file.size)})
                    </span>
                    <button type="button" onclick="removeFile(${index})" style="background: #dc3545; color: white; border: none; border-radius: 3px; padding: 0.25rem 0.5rem; font-size: 0.8rem; cursor: pointer;">Remove</button>
                </div>
            `).join('');
        }

        function clearSelectedFilesDisplay() {
            const existingList = uploadZone.querySelector('.selected-files-preview');
            if (existingList) {
                existingList.remove();
            }
        }

        function removeFile(index) {
            selectedFiles.splice(index, 1);
            updateFileDisplay();
        }

        function clearAllFiles() {
            selectedFiles = [];
            fileInput.value = '';
            updateFileDisplay();
        }

        async function startUpload() {
            if (selectedFiles.length === 0 || uploadInProgress) return;

            uploadInProgress = true;
            uploadBtn.disabled = true;
            progressSection.style.display = 'block';
            
            // Clear previous file list
            fileList.innerHTML = '';
            
            // Add files to list
            selectedFiles.forEach((file, index) => {
                const fileItem = document.createElement('div');
                fileItem.className = 'file-item';
                fileItem.innerHTML = `
                    <div class="file-info">
                        <div class="file-icon">${file.type.startsWith('video/') ? 'üé•' : 'üñºÔ∏è'}</div>
                        <div>
                            <div><strong>${file.name}</strong></div>
                            <div style="font-size: 0.9rem; color: #666;">${formatFileSize(file.size)}</div>
                        </div>
                    </div>
                    <div class="file-status status-pending" id="status-${index}">Pending</div>
                `;
                fileList.appendChild(fileItem);
            });

            try {
                const formData = new FormData();
                selectedFiles.forEach(file => {
                    formData.append('media', file);
                });

                const response = await fetch(`/admin/sets/<%= set.id %>/upload`, {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    progressFill.style.width = '100%';
                    
                    let message = `Upload complete! ${result.uploaded} files uploaded successfully.`;
                    if (result.skipped > 0) {
                        message += ` ${result.skipped} duplicates were skipped.`;
                    }
                    progressText.textContent = message;
                    
                    // Update file statuses based on results
                    if (result.duplicates && result.duplicates.length > 0) {
                        // Mark duplicates as skipped
                        const duplicateNames = new Set(result.duplicates.map(d => d.originalName));
                        
                        selectedFiles.forEach((file, index) => {
                            const status = document.getElementById(`status-${index}`);
                            if (duplicateNames.has(file.name)) {
                                status.className = 'file-status status-skipped';
                                status.textContent = 'Duplicate (Skipped)';
                                status.title = 'This file was skipped because an identical file already exists in this set';
                            } else {
                                status.className = 'file-status status-success';
                                status.textContent = 'Success';
                            }
                        });
                    } else {
                        // Mark all as success
                        selectedFiles.forEach((file, index) => {
                            const status = document.getElementById(`status-${index}`);
                            status.className = 'file-status status-success';
                            status.textContent = 'Success';
                        });
                    }

                    // Reset after a delay
                    setTimeout(() => {
                        resetUpload();
                        
                        let alertMessage = `Upload completed successfully! ${result.uploaded} files were uploaded.`;
                        if (result.skipped > 0) {
                            alertMessage += `\n${result.skipped} duplicate files were automatically skipped.`;
                        }
                        alertMessage += '\n\nYou can now upload more files or go back to sets.';
                        
                        alert(alertMessage);
                    }, 2000);
                } else {
                    throw new Error(result.error || 'Upload failed');
                }
            } catch (error) {
                console.error('Upload error:', error);
                progressText.textContent = `Upload failed: ${error.message}`;
                
                // Update all file statuses to error
                selectedFiles.forEach((file, index) => {
                    const status = document.getElementById(`status-${index}`);
                    status.className = 'file-status status-error';
                    status.textContent = 'Error';
                });
                
                alert('Upload failed: ' + error.message);
                resetUpload();
            }
        }

        function resetUpload() {
            uploadInProgress = false;
            // Don't clear selected files automatically - let user choose
            uploadBtn.disabled = selectedFiles.length === 0;
            progressSection.style.display = 'none';
            progressFill.style.width = '0%';
            progressText.textContent = '0% complete';
            
            if (selectedFiles.length > 0) {
                uploadZone.querySelector('.upload-text').textContent = 
                    `${selectedFiles.length} file(s) selected (drag more to add)`;
            } else {
                uploadZone.querySelector('.upload-text').textContent = 'Click to select files or drag and drop';
            }
        }

        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }
    </script>
</body>
</html>