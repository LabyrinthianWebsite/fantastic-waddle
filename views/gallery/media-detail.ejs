<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            line-height: 1.6;
            color: #333;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        /* Header */
        header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            box-shadow: 0 2px 20px rgba(0, 0, 0, 0.1);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 0;
        }

        .logo {
            font-size: 1.8rem;
            font-weight: bold;
            color: #667eea;
            text-decoration: none;
        }

        .nav-links {
            display: flex;
            gap: 2rem;
            list-style: none;
        }

        .nav-links a {
            text-decoration: none;
            color: #333;
            font-weight: 500;
            transition: color 0.3s ease;
        }

        .nav-links a:hover {
            color: #667eea;
        }

        /* Breadcrumb */
        .breadcrumb {
            background: rgba(255, 255, 255, 0.9);
            padding: 1rem 0;
            margin-bottom: 2rem;
        }

        .breadcrumb a {
            color: #667eea;
            text-decoration: none;
        }

        .breadcrumb a:hover {
            text-decoration: underline;
        }

        /* Media Container */
        .media-container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
        }

        .media-viewer {
            position: relative;
            background: #000;
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 500px;
        }

        .media-viewer img {
            max-width: 100%;
            max-height: 80vh;
            object-fit: contain;
            display: block;
        }

        /* Offline Video Player */
        .video-player {
            position: relative;
            width: 100%;
            background: #000;
        }

        .video-element {
            width: 100%;
            height: auto;
            max-height: 80vh;
            outline: none;
        }

        .custom-controls {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(transparent, rgba(0,0,0,0.8));
            color: white;
            padding: 20px;
            display: flex;
            align-items: center;
            gap: 15px;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .video-player:hover .custom-controls,
        .custom-controls.always-visible {
            opacity: 1;
        }

        .play-pause-btn {
            background: none;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
            padding: 5px;
            border-radius: 50%;
            transition: background 0.3s ease;
        }

        .play-pause-btn:hover {
            background: rgba(255,255,255,0.2);
        }

        .progress-container {
            flex: 1;
            height: 6px;
            background: rgba(255,255,255,0.3);
            border-radius: 3px;
            cursor: pointer;
            position: relative;
        }

        .progress-bar {
            height: 100%;
            background: #667eea;
            border-radius: 3px;
            width: 0%;
            transition: width 0.1s ease;
        }

        .time-display {
            font-size: 14px;
            min-width: 100px;
            text-align: center;
        }

        .volume-container {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .volume-btn {
            background: none;
            border: none;
            color: white;
            font-size: 18px;
            cursor: pointer;
            padding: 5px;
        }

        .volume-slider {
            width: 80px;
            height: 4px;
            background: rgba(255,255,255,0.3);
            border-radius: 2px;
            outline: none;
            cursor: pointer;
        }

        .fullscreen-btn {
            background: none;
            border: none;
            color: white;
            font-size: 18px;
            cursor: pointer;
            padding: 5px;
        }

        /* Media Info */
        .media-info {
            padding: 2rem;
        }

        .media-title {
            font-size: 1.5rem;
            font-weight: bold;
            margin-bottom: 1rem;
            color: #333;
        }

        .media-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .detail-item {
            background: rgba(102, 126, 234, 0.1);
            padding: 1rem;
            border-radius: 8px;
        }

        .detail-label {
            font-weight: 600;
            color: #667eea;
            font-size: 0.9rem;
            margin-bottom: 0.5rem;
        }

        .detail-value {
            color: #333;
        }

        /* Navigation */
        .media-navigation {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1.5rem 2rem;
            background: rgba(102, 126, 234, 0.1);
            border-top: 1px solid rgba(0, 0, 0, 0.1);
        }

        .nav-btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.3s ease;
        }

        .nav-btn:hover {
            background: #5a67d8;
            transform: translateY(-2px);
        }

        .nav-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
        }

        .back-btn {
            background: #6c757d;
        }

        .back-btn:hover {
            background: #5a6268;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .nav-links {
                display: none;
            }
            
            .media-details {
                grid-template-columns: 1fr;
            }
            
            .media-navigation {
                flex-direction: column;
                gap: 1rem;
            }
            
            .custom-controls {
                padding: 10px;
                gap: 10px;
            }
            
            .volume-container {
                display: none;
            }
        }
    </style>
</head>
<body>
    <header>
        <nav class="container">
            <a href="/" class="logo">Gallery Suite</a>
            <ul class="nav-links">
                <li><a href="/">Home</a></li>
                <li><a href="/studios">Studios</a></li>
                <li><a href="/models">Models</a></li>
                <li><a href="/sets">Sets</a></li>
            </ul>
        </nav>
    </header>

    <main>
        <div class="container">
            <div class="breadcrumb">
                <a href="/">Home</a> / 
                <a href="/sets">Sets</a> / 
                <a href="/sets/<%= media.set_slug %>"><%= media.set_name %></a> / 
                <%= media.filename %>
            </div>

            <div class="media-container">
                <div class="media-viewer">
                    <% if (media.file_type === 'video') { %>
                        <div class="video-player" id="videoPlayer">
                            <video class="video-element" id="video" preload="metadata">
                                <source src="/<%= media.original_path %>" type="<%= media.mime_type %>">
                                Your browser does not support the video tag.
                            </video>
                            
                            <div class="custom-controls" id="customControls">
                                <button class="play-pause-btn" id="playPauseBtn">‚ñ∂Ô∏è</button>
                                
                                <div class="progress-container" id="progressContainer">
                                    <div class="progress-bar" id="progressBar"></div>
                                </div>
                                
                                <div class="time-display" id="timeDisplay">0:00 / 0:00</div>
                                
                                <div class="volume-container">
                                    <button class="volume-btn" id="volumeBtn">üîä</button>
                                    <input type="range" class="volume-slider" id="volumeSlider" min="0" max="100" value="100">
                                </div>
                                
                                <button class="fullscreen-btn" id="fullscreenBtn">‚õ∂</button>
                            </div>
                        </div>
                    <% } else { %>
                        <img src="/<%= media.original_path %>" alt="<%= media.filename %>" loading="lazy">
                    <% } %>
                </div>

                <div class="media-info">
                    <h1 class="media-title"><%= media.filename %></h1>
                    
                    <div class="media-details">
                        <div class="detail-item">
                            <div class="detail-label">File Type</div>
                            <div class="detail-value"><%= media.file_type.toUpperCase() %></div>
                        </div>
                        
                        <div class="detail-item">
                            <div class="detail-label">File Size</div>
                            <div class="detail-value"><%= (media.filesize / 1024 / 1024).toFixed(2) %> MB</div>
                        </div>
                        
                        <% if (media.width && media.height) { %>
                        <div class="detail-item">
                            <div class="detail-label">Dimensions</div>
                            <div class="detail-value"><%= media.width %> √ó <%= media.height %></div>
                        </div>
                        <% } %>
                        
                        <% if (media.duration) { %>
                        <div class="detail-item">
                            <div class="detail-label">Duration</div>
                            <div class="detail-value"><%= Math.floor(media.duration / 60) %>:<%= String(Math.floor(media.duration % 60)).padStart(2, '0') %></div>
                        </div>
                        <% } %>
                        
                        <div class="detail-item">
                            <div class="detail-label">Set</div>
                            <div class="detail-value"><a href="/sets/<%= media.set_slug %>"><%= media.set_name %></a></div>
                        </div>
                        
                        <div class="detail-item">
                            <div class="detail-label">Model</div>
                            <div class="detail-value"><a href="/models/<%= media.model_slug %>"><%= media.model_name %></a></div>
                        </div>
                    </div>
                </div>

                <div class="media-navigation">
                    <% if (prevMedia) { %>
                        <a href="/media/<%= prevMedia.id %>" class="nav-btn">
                            ‚Üê Previous: <%= prevMedia.filename %>
                        </a>
                    <% } else { %>
                        <span></span>
                    <% } %>
                    
                    <a href="/sets/<%= media.set_slug %>" class="nav-btn back-btn">
                        Back to Set
                    </a>
                    
                    <% if (nextMedia) { %>
                        <a href="/media/<%= nextMedia.id %>" class="nav-btn">
                            Next: <%= nextMedia.filename %> ‚Üí
                        </a>
                    <% } else { %>
                        <span></span>
                    <% } %>
                </div>
            </div>
        </div>
    </main>

    <script>
        // 100% Offline Video Player Implementation
        document.addEventListener('DOMContentLoaded', function() {
            const video = document.getElementById('video');
            const videoPlayer = document.getElementById('videoPlayer');
            const customControls = document.getElementById('customControls');
            const playPauseBtn = document.getElementById('playPauseBtn');
            const progressContainer = document.getElementById('progressContainer');
            const progressBar = document.getElementById('progressBar');
            const timeDisplay = document.getElementById('timeDisplay');
            const volumeBtn = document.getElementById('volumeBtn');
            const volumeSlider = document.getElementById('volumeSlider');
            const fullscreenBtn = document.getElementById('fullscreenBtn');

            if (!video) return; // Skip if not a video

            // Disable default video controls
            video.controls = false;

            // Play/Pause functionality
            playPauseBtn.addEventListener('click', togglePlayPause);
            video.addEventListener('click', togglePlayPause);

            function togglePlayPause() {
                if (video.paused) {
                    video.play();
                    playPauseBtn.textContent = '‚è∏Ô∏è';
                } else {
                    video.pause();
                    playPauseBtn.textContent = '‚ñ∂Ô∏è';
                }
            }

            // Progress bar update
            video.addEventListener('timeupdate', updateProgress);

            function updateProgress() {
                if (video.duration) {
                    const progressPercent = (video.currentTime / video.duration) * 100;
                    progressBar.style.width = progressPercent + '%';
                    
                    // Update time display
                    const currentMin = Math.floor(video.currentTime / 60);
                    const currentSec = Math.floor(video.currentTime % 60);
                    const durationMin = Math.floor(video.duration / 60);
                    const durationSec = Math.floor(video.duration % 60);
                    
                    timeDisplay.textContent = 
                        `${currentMin}:${currentSec.toString().padStart(2, '0')} / ${durationMin}:${durationSec.toString().padStart(2, '0')}`;
                }
            }

            // Progress bar click to seek
            progressContainer.addEventListener('click', function(e) {
                const clickX = e.offsetX;
                const width = progressContainer.offsetWidth;
                const duration = video.duration;
                video.currentTime = (clickX / width) * duration;
            });

            // Volume control
            volumeSlider.addEventListener('input', function() {
                video.volume = this.value / 100;
                updateVolumeIcon();
            });

            volumeBtn.addEventListener('click', function() {
                video.muted = !video.muted;
                updateVolumeIcon();
            });

            function updateVolumeIcon() {
                if (video.muted || video.volume === 0) {
                    volumeBtn.textContent = 'üîá';
                } else if (video.volume < 0.5) {
                    volumeBtn.textContent = 'üîâ';
                } else {
                    volumeBtn.textContent = 'üîä';
                }
            }

            // Fullscreen functionality
            fullscreenBtn.addEventListener('click', toggleFullscreen);

            function toggleFullscreen() {
                if (!document.fullscreenElement) {
                    videoPlayer.requestFullscreen().catch(err => {
                        console.log('Error attempting to enable fullscreen:', err.message);
                    });
                } else {
                    document.exitFullscreen();
                }
            }

            // Keyboard controls
            document.addEventListener('keydown', function(e) {
                if (e.target.tagName.toLowerCase() === 'input') return;
                
                switch(e.code) {
                    case 'Space':
                        e.preventDefault();
                        togglePlayPause();
                        break;
                    case 'ArrowLeft':
                        e.preventDefault();
                        video.currentTime = Math.max(0, video.currentTime - 10);
                        break;
                    case 'ArrowRight':
                        e.preventDefault();
                        video.currentTime = Math.min(video.duration, video.currentTime + 10);
                        break;
                    case 'ArrowUp':
                        e.preventDefault();
                        video.volume = Math.min(1, video.volume + 0.1);
                        volumeSlider.value = video.volume * 100;
                        updateVolumeIcon();
                        break;
                    case 'ArrowDown':
                        e.preventDefault();
                        video.volume = Math.max(0, video.volume - 0.1);
                        volumeSlider.value = video.volume * 100;
                        updateVolumeIcon();
                        break;
                    case 'KeyM':
                        e.preventDefault();
                        video.muted = !video.muted;
                        updateVolumeIcon();
                        break;
                    case 'KeyF':
                        e.preventDefault();
                        toggleFullscreen();
                        break;
                }
            });

            // Show controls when video loads
            video.addEventListener('loadeddata', function() {
                customControls.classList.add('always-visible');
                setTimeout(() => {
                    customControls.classList.remove('always-visible');
                }, 3000);
            });

            // Auto-hide controls
            let controlsTimeout;
            
            videoPlayer.addEventListener('mousemove', function() {
                clearTimeout(controlsTimeout);
                customControls.style.opacity = '1';
                
                controlsTimeout = setTimeout(() => {
                    if (!video.paused) {
                        customControls.style.opacity = '0';
                    }
                }, 3000);
            });

            // Keep controls visible when paused
            video.addEventListener('pause', function() {
                customControls.style.opacity = '1';
            });

            video.addEventListener('play', function() {
                controlsTimeout = setTimeout(() => {
                    customControls.style.opacity = '0';
                }, 3000);
            });
        });
    </script>
</body>
</html>